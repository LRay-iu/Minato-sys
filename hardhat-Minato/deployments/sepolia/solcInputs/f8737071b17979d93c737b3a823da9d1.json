{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/Minatosys.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\n// EVM, Ethereum Virtual Machine\r\nerror NotOwner();\r\n\r\ncontract Minatosys {\r\n    using PriceConverter for uint256;\r\n    uint256 public constant minimumUsd = 0;\r\n    address public immutable i_owner;\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAccountFunded;\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\r\n            \"Didn't send enough\"\r\n        );\r\n        funders.push(msg.sender);\r\n        addressToAccountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = funders[funderIndex];\r\n            addressToAccountFunded[funder] = 0; // 清零账户余额\r\n        }\r\n        // 重置数组\r\n        delete funders;\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"call failed\");\r\n    }\r\n\r\n    // 管理员转账\r\n    function withdrawToAddress(\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    // 莫名其妙地收到钱就执行下面两个方法\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    // 自定义修饰符\r\n    modifier onlyOwner() {\r\n        require(msg.sender == i_owner, \"Sender is not owner\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        //得到汇率(USD/ETH)\r\n        //ABIw\r\n        //Address 0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        // );\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n\r\n        return uint256(answer * 1e10);\r\n    }\r\n\r\n    function getVersion() internal view returns (uint256) {\r\n        //获取了链外数据源的版本信息，并将其作为uint256类型返回\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        );\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}